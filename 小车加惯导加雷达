import sys
import math
import time
import threading
import socket
import re
import numpy as np
from PyQt5.QtCore import QObject, pyqtSignal
import can
from PyQt5.QtWidgets import (QApplication, QWidget, QVBoxLayout, QHBoxLayout, QPushButton,
                             QLabel, QLineEdit, QGroupBox, QMessageBox, QComboBox, QGridLayout)
from PyQt5.QtCore import Qt
import pyqtgraph as pg
#雷达信号处理
def parse_cluster_general(data):
    cluster_id = data[0]
    # 前方距离X
    dist_raw = ((data[1] << 5) | (data[2] >> 3)) & 0x1FFF
    dist_x = dist_raw * 0.2 - 500
    # RCS
    rcs_raw = data[7] & 0x7F
    rcs = rcs_raw * 0.5 - 64
    return cluster_id, dist_x, rcs
# ========== 雷达绘图类 ==========
class SimpleKalman:
    """一维位置/速度卡尔曼滤波器"""
    def __init__(self, x0, v0=0.0):
        self.x = np.array([x0, v0], dtype=np.float64)  # [位置, 速度]
        self.P = np.eye(2)
        self.F = np.array([[1, 0.1], [0, 1]])  # dt=0.1
        self.Q = np.eye(2) * 0.01
        self.H = np.array([[1, 0]])
        self.R = np.array([[0.2]])
    def predict(self):
        self.x = self.F @ self.x
        self.P = self.F @ self.P @ self.F.T + self.Q
    def update(self, z):
        y = np.array([[z]]) - self.H @ self.x
        S = self.H @ self.P @ self.H.T + self.R
        K = self.P @ self.H.T @ np.linalg.inv(S)
        self.x = self.x + (K @ y).reshape(2)
        self.P = (np.eye(2) - K @ self.H) @ self.P
    def value(self):
        return float(self.x[0])
    
class RadarRCSPlot(pg.PlotWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setBackground('w')
        self.showGrid(x=True, y=True, alpha=0.3)
        self.setLabel('left', 'RCS (dBsm)')
        self.setLabel('bottom', '前方距离 (m)')
        self.setXRange(0, 50)
        self.setYRange(-40, 20)
        self.scatter = pg.ScatterPlotItem(size=10, brush=pg.mkBrush(0, 0, 255, 150))
        self.addItem(self.scatter)
        self.text_items = []
        self.targets = []   # 本帧所有目标
        self.tracked = None  # 跟踪目标卡尔曼
        self.tracked_rcs = None
        self.track_active = False  # 是否有锁定目标
        self.fixed_marker = None
        self.track_history = []
        self.selected_id = None  # 当前选中的目标id
        # 绑定鼠标点击事件
        self.scatter.sigClicked.connect(self.on_scatter_clicked)

    def add_target(self, dist_x, rcs, cluster_id):
        if 0 <= dist_x <= 50:
            self.targets.append((dist_x, rcs, cluster_id))
            if len(self.targets) > 100:
                self.targets.pop(0)

    def start_tracking(self, dist_x, rcs, cluster_id=None):
        self.tracked = SimpleKalman(dist_x)
        self.tracked_rcs = rcs
        self.track_active = True
        self.track_history = [(dist_x, rcs)]
        self.selected_id = cluster_id  # 记录选中的目标id

    def stop_tracking(self):
        self.tracked = None
        self.track_active = False
        self.track_history = []

    def step_tracking(self):
        """每帧根据现有目标最近邻关联+卡尔曼更新"""
        if not self.track_active or self.tracked is None:
            return
        cur_dist = self.tracked.value()
        min_dist = 1e6
        target = None
        # 优先根据选中的id跟踪
        if self.selected_id is not None:
            for t in self.targets:
                if t[2] == self.selected_id:
                    d = abs(t[0] - cur_dist)
                    if d < min_dist:
                        min_dist = d
                        target = t
            # 若选中id本帧没出现，自动失锁
            if target is None:
                self.tracked.predict()
                self.track_history.append((self.tracked.value(), self.tracked_rcs))
                if len(self.track_history) > 30:
                    self.track_history.pop(0)
                return
        else:
            for t in self.targets:
                d = abs(t[0] - cur_dist)
                if d < min_dist:
                    min_dist = d
                    target = t

        if target is not None and min_dist < 5.0:
            self.tracked.predict()
            self.tracked.update(target[0])
            self.tracked_rcs = target[1]
            self.track_history.append((self.tracked.value(), self.tracked_rcs))
            if len(self.track_history) > 30:
                self.track_history.pop(0)
        else:
            self.tracked.predict()
            self.track_history.append((self.tracked.value(), self.tracked_rcs))
            if len(self.track_history) > 30:
                self.track_history.pop(0)
    
    def on_scatter_clicked(self, plot, points):
        """点击目标点，自动跟踪该目标"""
        if not points:
            return
        pt = points[0]  # 只选第一个点
        dist = pt.pos().x()
        rcs = pt.pos().y()
        # 找到目标id
        found = None
        for t in self.targets:
            if abs(t[0] - dist) < 0.5 and abs(t[1] - rcs) < 0.5:  # 容忍0.5m
                found = t
                break
        if found:
            cluster_id = found[2]
            self.start_tracking(dist, rcs, cluster_id)
                
    def flush_display(self, *args, **kwargs):
        # 移除高亮marker
        if self.fixed_marker is not None:
            self.removeItem(self.fixed_marker)
            self.fixed_marker = None

        if not self.targets:
            self.scatter.setData([], [])
            for t in self.text_items:
                self.removeItem(t)
            self.text_items = []
            return

        dists = [t[0] for t in self.targets]
        rcss = [t[1] for t in self.targets]
        ids = [t[2] for t in self.targets]
        
        spots = [{'pos': (x, y), 'data': cid, 'brush': pg.mkBrush(0, 0, 255, 150)} for x, y, cid in zip(dists, rcss, ids)]
        self.scatter.setData(spots)
        for t in self.text_items:
            self.removeItem(t)
        self.text_items = []
        for dist, rcs, cid in zip(dists, rcss, ids):
            text = pg.TextItem(str(cid), anchor=(0.5, 0.5), color=(255, 0, 0))
            text.setPos(dist, rcs)
            self.addItem(text)
            self.text_items.append(text)

        # 新增：高亮物理目标轨迹
        if self.track_active and self.tracked is not None:
            self.step_tracking()
            tdist = self.tracked.value()
            trcs = self.tracked_rcs
            self.fixed_marker = pg.ScatterPlotItem([tdist], [trcs], size=22, brush=pg.mkBrush(255,0,0,200))
            self.addItem(self.fixed_marker)
            # 画轨迹
            if len(self.track_history) >= 2:
               xs, ys = zip(*self.track_history)
               xs = np.array(xs)
               ys = np.array(ys)
               traj = pg.PlotCurveItem(xs, ys, pen=pg.mkPen('r', width=2, style=Qt.DashLine))
               self.addItem(traj)
               if hasattr(self, "last_traj") and self.last_traj is not None:
                 self.removeItem(self.last_traj)
               self.last_traj = traj

# ========== 雷达信号 ==========
class RadarSignal(QObject):
    new_cluster = pyqtSignal(int, float, float)

# ========== 雷达线程 ==========
class RadarThread(threading.Thread):
    def __init__(self, signal, can_iface='can0', parent=None):
        super().__init__()
        self.daemon = True
        self.signal = signal
        self.running = True
        self.can_iface = can_iface
        self.bus = None
        self.CLUSTER_GENERAL_ID = 0x701

    def run(self):
        print("雷达线程启动...")
        try:
            self.bus = can.interface.Bus(
                channel=self.can_iface,
                bustype='socketcan',
                bitrate=500000
            )
            print(f"已连接到CAN接口 {self.can_iface}")

            while self.running:
                msg = self.bus.recv(timeout=0.05)
                if msg and msg.arbitration_id == self.CLUSTER_GENERAL_ID:
                    try:
                        cluster_id, dist_x, rcs = parse_cluster_general(msg.data)
                        self.signal.new_cluster.emit(cluster_id, dist_x, rcs)
                    except Exception as e:
                        print(f"解析雷达数据出错: {e}")
        except Exception as e:
            print(f"雷达CAN初始化失败: {e}")
            self.signal.new_cluster.emit(-1, 0, 0)  # 发送错误信号
        finally:
            if self.bus:
                self.bus.shutdown()
            print("雷达线程停止")
#小车控制类
class ScoutMiniCarControl:
    def __init__(self, can_channel='can0', bustype='socketcan'):
        try:
            self.bus = can.interface.Bus(channel=can_channel, bustype=bustype, bitrate=500000)
            print("CAN总线初始化成功")
        except Exception as e:
            print(f"CAN总线初始化失败: {e}")
            self.bus = None
        
        self._cmd_lock = threading.Lock()
        self._target_lin = 0.0
        self._target_ang = 0.0
        self._active = True
        self._timer = threading.Thread(target=self._periodic_send, daemon=True)
        self._timer.start()

    def _periodic_send(self):
        while self._active:
            with self._cmd_lock:
                lin, ang = self._target_lin, self._target_ang
            self.send_motion_cmd(lin, ang)
            time.sleep(0.02)  # 20ms

    def set_target(self, lin, ang):
        with self._cmd_lock:
            self._target_lin = lin
            self._target_ang = ang

    def stop(self):
        self.set_target(0, 0)
        time.sleep(0.05)  # 确保停下

    def move_linear(self, distance, speed=0.3):
        duration = abs(distance / speed)
        direction = 1 if distance >= 0 else -1
        self.set_target(speed * direction, 0)
        time.sleep(duration)
        self.stop()

    def move_circle(self, radius, arc_length=None, angle_deg=None, speed=0.2, clockwise=False):
        if arc_length is None and angle_deg is None:
            raise ValueError("arc_length或angle_deg必须指定一个")
        if arc_length is None:
            arc_length = 2 * math.pi * radius * (angle_deg / 360)
        ang_speed = speed / radius
        if clockwise:
            ang_speed = -abs(ang_speed)
        else:
            ang_speed = abs(ang_speed)
        duration = abs(arc_length / speed)
        self.set_target(speed, ang_speed)
        time.sleep(duration)
        self.stop()

    def send_motion_cmd(self, linear_speed=0, angular_speed=0):
        if self.bus is None:
            print("CAN总线未初始化，无法发送命令")
            return
            
        lin = int(linear_speed * 1000)  # m/s -> mm/s
        ang = int(angular_speed * 1000)  # rad/s -> 0.001rad/s
        lin_bytes = lin.to_bytes(2, 'big', signed=True)
        ang_bytes = ang.to_bytes(2, 'big', signed=True)
        data = lin_bytes + ang_bytes + bytes(4)
        msg = can.Message(arbitration_id=0x111, data=data, is_extended_id=False)
        try:
            self.bus.send(msg, timeout=0.01)
            # print(f"发送CAN指令: 线速度={linear_speed:.2f}m/s, 角速度={angular_speed:.2f}rad/s")
        except Exception as e:
            print(f"发送CAN指令失败: {e}")

    def enable_can_control(self):
        if self.bus is None:
            return
            
        msg = can.Message(arbitration_id=0x421, data=[0x01], is_extended_id=False)
        self.bus.send(msg)

    def clear_all_errors(self):
        if self.bus is None:
            return
            
        msg = can.Message(arbitration_id=0x441, data=[0x00], is_extended_id=False)
        self.bus.send(msg)

    def close(self):
        self._active = False
        self.stop()
        if self.bus:
            self.bus.shutdown()

# =================== Stanley轨迹控制 =======================
def stanley_control(px, py, yaw, v, path):
    if len(path) == 0:
        return 0
    dists = [math.hypot(px - p[0], py - p[1]) for p in path]
    min_id = int(np.argmin(dists))
    target = path[min_id]
    
    # 计算路径方向
    if min_id < len(path)-2:
        dx = path[min_id+1][0] - path[min_id][0]
        dy = path[min_id+1][1] - path[min_id][1]
        yaw_path = math.atan2(dy, dx)
    else:
        # 如果是最后一个点，使用前一个点计算方向
        if min_id > 0:
            dx = path[min_id][0] - path[min_id-1][0]
            dy = path[min_id][1] - path[min_id-1][1]
            yaw_path = math.atan2(dy, dx)
        else:
            yaw_path = yaw
    
    # 计算横向误差
    error = (py - target[1])*math.cos(yaw_path) - (px - target[0])*math.sin(yaw_path)
    
    # 调整参数以获得更好的响应
    k = 1.5  # 增加增益以获得更快的响应
    yaw_diff = yaw_path - yaw
    yaw_diff = (yaw_diff + np.pi) % (2*np.pi) - np.pi
    
    # 计算转向角
    steer = yaw_diff + math.atan2(k*error, max(v, 0.3))
    steer = max(-1.0, min(1.0, steer))
    return steer

# =================== 惯导TCP接收 ===========================
class GNSSPose:
    def __init__(self, ip="192.168.1.111", port=3004):
        self.positions = []
        self.yaws = []
        self.vs = []
        self.lock = threading.Lock()
        self.has_data = False  # 标记是否收到过数据
        self.t = threading.Thread(target=self.tcp_data_receiver, args=(ip, port), daemon=True)
        self.t.start()
        self.default_lat = 28.353120
        self.default_lon = 112.508440
        self.default_yaw = 0.0
        self.default_v = 0.5

    def parse_inspvaxa(self, line):
        try:
            parts = line.strip().split(';')
            data = parts[1].split(',')
            lat = float(data[2])
            lon = float(data[3])
            yaw = float(data[8])
            v = float(data[6])
            return lat, lon, yaw, v
        except Exception as e:
            print("[惯导解析异常]", e)
            return None

    def tcp_data_receiver(self, ip, port):
        pattern = re.compile(r'(#INSPVAXA[^\r\n]*)')
        print(f"尝试连接惯导: {ip}:{port}")
        while True:
            try:
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(5.0)  # 设置超时
                sock.connect((ip, port))
                print(f"成功连接到惯导设备 {ip}:{port}")
                buffer = ""
                while True:
                    try:
                        data = sock.recv(4096)
                        if not data:
                            print("惯导连接断开")
                            sock.close()
                            time.sleep(1)
                            break
                        buffer += data.decode('utf-8', errors='ignore')
                        for match in pattern.finditer(buffer):
                            line = match.group(1)
                            res = self.parse_inspvaxa(line)
                            if res:
                                lat, lon, yaw, v = res
                                with self.lock:
                                    self.positions.append((lat, lon))
                                    self.yaws.append(yaw)
                                    self.vs.append(v)
                                    self.positions = self.positions[-1000:]
                                    self.yaws = self.yaws[-1000:]
                                    self.vs = self.vs[-1000:]
                                    self.has_data = True
                        buffer = buffer[buffer.rfind('#INSPVAXA'):] if '#INSPVAXA' in buffer else ""
                    except socket.timeout:
                        print("惯导接收超时")
                        continue
                    except Exception as e:
                        print(f"接收数据异常: {e}")
                        break
            except Exception as e:
                print(f"[TCP连接异常] {e}")
                time.sleep(2)

    def get_latest(self):
        with self.lock:
            if self.positions:
                lat, lon = self.positions[-1]
                yaw = self.yaws[-1]
                v = self.vs[-1] if self.vs else 0
                return lat, lon, yaw, v
            else:
                # 返回默认值用于测试
                return self.default_lat, self.default_lon, self.default_yaw, self.default_v
            
def parse_cluster_general(data):
    cluster_id = data[0]
    # 前方距离X
    dist_raw = ((data[1] << 5) | (data[2] >> 3)) & 0x1FFF
    dist_x = dist_raw * 0.2 - 500
    # RCS
    rcs_raw = data[7] & 0x7F
    rcs = rcs_raw * 0.5 - 64
    return cluster_id, dist_x, rcs

# =================== 路径轨迹生成工具 =====================
def geo_offset(lat, lon, dx, dy):
    lat_new = lat + (dy / 111320.0)
    lon_new = lon + (dx / (40075000.0 * math.cos(math.radians(lat)) / 360.0))
    return lat_new, lon_new

def generate_line_path_by_distance(start_lat, start_lon, distance, heading_deg, repeat=1, steps=60):
    heading_rad = math.radians(heading_deg)
    dx = distance * math.sin(heading_rad)
    dy = distance * math.cos(heading_rad)
    end_lat, end_lon = geo_offset(start_lat, start_lon, dx, dy)
    path = []
    for i in range(repeat):
        for t in np.linspace(0, 1, steps):
            lat = start_lat + (end_lat - start_lat) * t
            lon = start_lon + (end_lon - start_lon) * t
            path.append((lat, lon))
        for t in np.linspace(1, 0, steps):
            lat = start_lat + (end_lat - start_lat) * t
            lon = start_lon + (end_lon - start_lon) * t
            path.append((lat, lon))
    return path

def generate_circle_path(center, radius_m, n_points=100, circles=1, clockwise=False):
    path = []
    lat0, lon0 = center
    for c in range(circles):
        for i in range(n_points):
            ang = 2 * math.pi * (i / n_points)
            if clockwise:
                ang = -ang
            dx = radius_m * math.cos(ang)
            dy = radius_m * math.sin(ang)
            lat, lon = geo_offset(lat0, lon0, dx, dy)
            path.append((lat, lon))
    return path

# ==================== 主界面UI ============================
class MainUI(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Stanley轨迹跟踪与雷达RCS可视化")
        self.setGeometry(100, 100, 1400, 800)

        self.pose = GNSSPose()
        self.car = ScoutMiniCarControl()
        self.path = []
        self.mode = "line"
        self._active = False
        self.path_points = []
        self.actual_points = []
        self.last_steer = 0.0
        self.last_speed = 0.0

        # ---- 雷达信号与绘图 ----
        self.radar_signal = RadarSignal()
        self.radar_plot = RadarRCSPlot()
        self.radar_signal.new_cluster.connect(self.on_new_cluster)
        self.radar_thread = RadarThread(self.radar_signal)
        self.radar_thread.start()
        self.btnLockTarget = QPushButton("锁定最近目标")
        self.btnLockTarget.clicked.connect(self.lock_nearest_target)
       
        # ========= 参数与轨迹区域 =========
        config_layout = QGridLayout()
        # ...（如你前述设置，去掉方位角相关输入）

        config_layout.addWidget(QLabel("运动模式:"), 0, 0)
        self.mode_combo = QComboBox()
        self.mode_combo.addItems(["直线往返", "圆周运动"])
        self.mode_combo.currentIndexChanged.connect(self.mode_changed)
        config_layout.addWidget(self.mode_combo, 0, 1)

        self.dist_edit = QLineEdit("20")
        self.repeat_edit = QLineEdit("2")
        config_layout.addWidget(QLabel("直行距离(m):"), 1, 0)
        config_layout.addWidget(self.dist_edit, 1, 1)
        config_layout.addWidget(QLabel("往返次数:"), 1, 2)
        config_layout.addWidget(self.repeat_edit, 1, 3)

        self.radius_edit = QLineEdit("5.0")
        self.circles_edit = QLineEdit("2")
        self.cw_combo = QComboBox()
        self.cw_combo.addItems(["逆时针", "顺时针"])
        config_layout.addWidget(QLabel("半径(m):"), 2, 0)
        config_layout.addWidget(self.radius_edit, 2, 1)
        config_layout.addWidget(QLabel("圈数:"), 2, 2)
        config_layout.addWidget(self.circles_edit, 2, 3)
        config_layout.addWidget(QLabel("方向:"), 3, 0)
        config_layout.addWidget(self.cw_combo, 3, 1)
        config_layout.addWidget(self.btnLockTarget, 4, 0)


        # ========== 按钮区域 ==========
        btn_layout = QHBoxLayout()
        self.btnGen = QPushButton("生成轨迹")
        self.btnGen.clicked.connect(self.gen_path)
        btn_layout.addWidget(self.btnGen)

        self.btnStart = QPushButton("开始Stanley跟踪")
        self.btnStart.clicked.connect(self.start_control)
        btn_layout.addWidget(self.btnStart)

        self.btnStop = QPushButton("停止")
        self.btnStop.clicked.connect(self.stop_car)
        btn_layout.addWidget(self.btnStop)

        # ========== 绘图和状态区 ==========
        self.plotWidget = pg.PlotWidget(title="经纬度轨迹跟踪")
        self.plotWidget.setLabel('left', '纬度')
        self.plotWidget.setLabel('bottom', '经度')
        self.plotWidget.showGrid(x=True, y=True)
        self.plotWidget.setAspectLocked(True)

        status_layout = QHBoxLayout()
        self.statusLabel = QLabel("等待惯导数据...")
        self.statusLabel.setStyleSheet("font-weight: bold; color: #333;")
        status_layout.addWidget(self.statusLabel)
        self.speedLabel = QLabel("速度: 0.0 m/s")
        status_layout.addWidget(self.speedLabel)
        self.steerLabel = QLabel("转向: 0.0")
        status_layout.addWidget(self.steerLabel)

        # ========= 主布局：左侧轨迹，右侧RCS =========
        main_layout = QHBoxLayout()
        left_layout = QVBoxLayout()
        left_layout.addLayout(config_layout)
        left_layout.addLayout(btn_layout)
        left_layout.addWidget(self.plotWidget)
        left_layout.addLayout(status_layout)

        main_layout.addLayout(left_layout, 2)
        main_layout.addWidget(self.radar_plot, 1)

        self.setLayout(main_layout)

        # 定时刷新（轨迹+RCS）
        self.timer = pg.QtCore.QTimer()
        self.timer.timeout.connect(self.update_plot)
        self.timer.timeout.connect(self.update_radar_plot)
        self.timer.start(200)

        # 初始化轨迹绘图
        self.pathPlot = self.plotWidget.plot([], [], pen=pg.mkPen('b', width=2), name="目标轨迹")
        self.actualPlot = self.plotWidget.plot([], [], pen=pg.mkPen('g', width=2), name="实际轨迹")
        self.carMarker = self.plotWidget.plot([], [], pen=None, symbol='o', symbolBrush='r', symbolSize=10, name="小车位置")
        self.targetMarker = self.plotWidget.plot([], [], pen=None, symbol='x', symbolBrush='m', symbolSize=12, name="目标点")
        self.plotWidget.addLegend()

        self.mode_changed(0)

    # ====== 雷达数据新目标信号槽 ======
    def on_new_cluster(self, cluster_id, dist_x, rcs):
        self.radar_plot.add_target(dist_x, rcs, cluster_id)

    def update_radar_plot(self):
        self.radar_plot.flush_display()


    def mode_changed(self, idx):
        self.mode = "line" if idx == 0 else "circle"
    def get_current_pose(self):
        """获取惯导最新位置，没有时用默认值"""
        lat, lon, *_ = self.pose.get_latest()
        return float(lat), float(lon)
    def gen_path(self):
        try:
            if self.mode == "line":
                lat1 = float(self.lat1_edit.text())
                lon1 = float(self.lon1_edit.text())
                distance = float(self.dist_edit.text())
                heading = float(self.heading_edit.text())
                repeat = int(self.repeat_edit.text())
                self.path = generate_line_path_by_distance(lat1, lon1, distance, heading, repeat=repeat, steps=60)
                self.path_points = self.path
                heading_rad = math.radians(heading)
                dx = distance * math.sin(heading_rad)
                dy = distance * math.cos(heading_rad)
                end_lat, end_lon = geo_offset(lat1, lon1, dx, dy)
                self.statusLabel.setText(f"直线轨迹已生成，共{len(self.path)}点。终点：({end_lat:.6f}, {end_lon:.6f})")
            else:
                center_lat = float(self.center_lat_edit.text())
                center_lon = float(self.center_lon_edit.text())
                radius = float(self.radius_edit.text())
                circles = int(self.circles_edit.text())
                cw = self.cw_combo.currentIndex() == 1
                self.path = generate_circle_path((center_lat, center_lon), radius, n_points=100, circles=circles, clockwise=cw)
                self.path_points = self.path
                self.statusLabel.setText(f"圆周轨迹已生成，共{len(self.path)}点。中心：({center_lat:.6f}, {center_lon:.6f})")
            
            # 更新绘图
            if self.path:
                lons = [p[1] for p in self.path]
                lats = [p[0] for p in self.path]
                self.pathPlot.setData(lons, lats)
        except Exception as e:
            QMessageBox.warning(self, "参数错误", str(e))

    def update_plot(self):
        # 更新实际轨迹
        if self.actual_points:
            actual_lons, actual_lats = zip(*self.actual_points)
            self.actualPlot.setData(actual_lons, actual_lats)
        
        # 更新小车位置
        state = self.pose.get_latest()
        if state:
            lat, lon, yaw, v = state
            self.carMarker.setData([lon], [lat])
            
            # 显示目标点
            if self.path:
                min_id = 0
                min_dist = float('inf')
                for i, p in enumerate(self.path):
                    dist = math.hypot(lon - p[1], lat - p[0])
                    if dist < min_dist:
                        min_dist = dist
                        min_id = i
                target = self.path[min_id]
                self.targetMarker.setData([target[1]], [target[0]])
        
        # 更新状态标签
        self.speedLabel.setText(f"速度: {self.last_speed:.2f} m/s")
        self.steerLabel.setText(f"转向: {self.last_steer:.2f} rad")
    
    def lock_nearest_target(self):
      """一键锁定当前最近目标为物理跟踪目标"""
      if self.radar_plot.targets:
        # 取当前最近目标（距离最近）
        t = min(self.radar_plot.targets, key=lambda x: abs(x[0]))
        self.radar_plot.start_tracking(t[0], t[1])

    def update_radar_plot(self):
      self.radar_plot.flush_display()
      
    def start_control(self):
        if not self.path:
            self.gen_path()
        if self._active:
            return
            
        self._active = True
        self.actual_points = []  # 重置实际轨迹
        threading.Thread(target=self.control_loop, daemon=True).start()

    def stop_car(self):
        self._active = False
        self.car.stop()
        self.statusLabel.setText("控制已停止")

    def control_loop(self):
        self.statusLabel.setText("控制已启动...")
        self.car.enable_can_control()  # 确保CAN控制已启用
        
        while self._active:
            state = self.pose.get_latest()
            if state and self.path:
                lat, lon, yaw, v = state
                # 记录实际轨迹点
                self.actual_points.append((lat, lon))
                if len(self.actual_points) > 500:
                    self.actual_points = self.actual_points[-500:]
                
                # 使用Stanley控制计算转向
                steer = stanley_control(lon, lat, math.radians(yaw), v, [(p[1], p[0]) for p in self.path])
                self.last_steer = steer
                self.last_speed = 0.5  # 固定速度
                
                # 发送控制指令
                self.car.set_target(0.5, steer)
                
                # 更新状态
                self.statusLabel.setText(f"控制中: 位置({lat:.6f},{lon:.6f}) 航向:{yaw:.1f}°")
            else:
                self.statusLabel.setText("等待惯导/路径数据...")
            
            time.sleep(0.1)  # 控制频率10Hz

    def closeEvent(self, event):
        self._active = False
        self.car.close()
        event.accept()

if __name__ == "__main__":
    app = QApplication(sys.argv)
    win = MainUI()
    win.show()
    sys.exit(app.exec_())
